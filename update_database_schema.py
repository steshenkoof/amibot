#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import asyncio
import logging
from database import db
import psycopg2
from config import DATABASE_URL

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def update_database_schema():
    """Update database schema with new columns"""
    await db.init_db()
    
    async with db.pool.acquire() as conn:
        try:
            # Add new columns if they don't exist
            logger.info("Adding new columns to users table...")
            
            # Check if columns exist and add them if they don't
            columns_to_add = [
                ("category", "TEXT DEFAULT '–∑–∞–ª'"),
                ("archived", "BOOLEAN DEFAULT FALSE"),
                ("archived_at", "TIMESTAMP"),
                ("approved_by", "BIGINT"),
                ("approved_at", "TIMESTAMP"), 
                ("first_seen", "TIMESTAMP"),
                ("last_active", "TIMESTAMP")
            ]
            
            for column_name, column_def in columns_to_add:
                try:
                    await conn.execute(f'''
                        ALTER TABLE users 
                        ADD COLUMN IF NOT EXISTS {column_name} {column_def}
                    ''')
                    logger.info(f"‚úÖ Added column: {column_name}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Column {column_name} might already exist: {e}")
            
            # Update existing users to have default values
            logger.info("Updating existing users with default values...")
            
            await conn.execute('''
                UPDATE users 
                SET category = COALESCE(category, '–∑–∞–ª'),
                    archived = COALESCE(archived, FALSE),
                    first_seen = COALESCE(first_seen, created_at),
                    last_active = COALESCE(last_active, created_at)
                WHERE category IS NULL OR archived IS NULL OR first_seen IS NULL OR last_active IS NULL
            ''')
            
            logger.info("‚úÖ Database schema updated successfully!")
            
            # Show current users with categories
            users = await conn.fetch('SELECT user_id, full_name, category, archived FROM users')
            logger.info(f"\nCurrent users ({len(users)}):")
            for user in users:
                status = "üóÉ ARCHIVED" if user['archived'] else "‚úÖ ACTIVE"
                logger.info(f"‚Ä¢ {user['full_name']} - {user['category']} - {status}")
                
        except Exception as e:
            logger.error(f"‚ùå Error updating database schema: {e}")
            raise
        finally:
            await db.close()

def update_database_schema():
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        
        print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É category –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        try:
            cursor.execute("""
                ALTER TABLE users 
                ADD COLUMN category VARCHAR(20) DEFAULT '–∑–∞–ª';
            """)
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ category")
        except psycopg2.errors.DuplicateColumn:
            print("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ category —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É is_archived –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        try:
            cursor.execute("""
                ALTER TABLE users 
                ADD COLUMN is_archived BOOLEAN DEFAULT FALSE;
            """)
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ is_archived")
        except psycopg2.errors.DuplicateColumn:
            print("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ is_archived —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        try:
            cursor.execute("""
                CREATE INDEX IF NOT EXISTS idx_users_active 
                ON users (is_archived) WHERE is_archived = FALSE;
            """)
            print("‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as e:
            print(f"‚ÑπÔ∏è –ò–Ω–¥–µ–∫—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        try:
            cursor.execute("""
                CREATE INDEX IF NOT EXISTS idx_users_category 
                ON users (category);
            """)
            print("‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        except Exception as e:
            print(f"‚ÑπÔ∏è –ò–Ω–¥–µ–∫—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {e}")
        
        conn.commit()
        print("‚úÖ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("""
            SELECT column_name, data_type, column_default 
            FROM information_schema.columns 
            WHERE table_name = 'users' 
            ORDER BY ordinal_position;
        """)
        
        columns = cursor.fetchall()
        print("\nüìä –¢–µ–∫—É—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users:")
        for col in columns:
            print(f"  - {col[0]}: {col[1]} (default: {col[2]})")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ö–µ–º—ã: {e}")
        if conn:
            conn.rollback()
    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()

if __name__ == "__main__":
    update_database_schema() 