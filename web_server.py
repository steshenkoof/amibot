#!/usr/bin/env python3
import asyncio
import json
import logging
from datetime import datetime
from pathlib import Path
from aiohttp import web, web_request
from aiohttp.web_response import Response


# Import database
from database import db

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def serve_web_app(request):
    """Serve the web location app"""
    try:
        html_file = Path("web_location.html")
        if html_file.exists():
            return web.FileResponse(html_file)
        else:
            return web.Response(text="Web app not found", status=404)
    except Exception as e:
        logger.error(f"Error serving web app: {e}")
        return web.Response(text="Server error", status=500)

async def handle_location_data(request):
    """Handle location data from web app"""
    try:
        data = await request.json()
        
        user_id = data.get('user_id')
        user_name = data.get('user_name', 'Unknown')
        action_type = data.get('type')  # 'check_in' or 'check_out'
        
        if not user_id or not action_type:
            return web.json_response(
                {'error': 'Missing required fields'}, 
                status=400
            )
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        location_data = {
            'latitude': data.get('latitude'),
            'longitude': data.get('longitude'),
            'accuracy': data.get('accuracy'),
            'altitude': data.get('altitude'),
            'timestamp': data.get('timestamp', datetime.now().isoformat()),
            'network_info': data.get('networkInfo', {}),
            'high_accuracy': True  # –ú–∞—Ä–∫–µ—Ä –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if action_type == 'check_in':
            result = await handle_check_in(user_id, user_name, location_data)
        elif action_type == 'check_out':
            result = await handle_check_out(user_id, user_name, location_data)
        else:
            return web.json_response(
                {'error': 'Invalid action type'}, 
                status=400
            )
        
        return web.json_response({
            'success': True,
            'message': result.get('message', 'Success'),
            'data': result
        })
        
    except json.JSONDecodeError:
        return web.json_response(
            {'error': 'Invalid JSON'}, 
            status=400
        )
    except Exception as e:
        logger.error(f"Error handling location data: {e}")
        return web.json_response(
            {'error': 'Server error'}, 
            status=500
        )

async def handle_check_in(user_id: int, user_name: str, location_data: dict):
    """Handle check-in with high accuracy location"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
        active_session = await db.get_active_session(user_id)
        if active_session:
            return {
                'success': False,
                'message': '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è'
            }
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        session_id = await db.start_work_session(
            user_id=user_id,
            username=user_name,
            location_lat=location_data.get('latitude'),
            location_lon=location_data.get('longitude'),
            extra_data=json.dumps({
                'accuracy': location_data.get('accuracy'),
                'altitude': location_data.get('altitude'),
                'network_info': location_data.get('network_info'),
                'high_accuracy': True,
                'timestamp': location_data.get('timestamp')
            })
        )
        
        return {
            'success': True,
            'message': f'–ü—Ä–∏—Ö–æ–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É –æ—Ç–º–µ—á–µ–Ω! (–¢–æ—á–Ω–æ—Å—Ç—å: ¬±{int(location_data.get("accuracy", 0))}–º)',
            'session_id': session_id,
            'location': {
                'lat': location_data.get('latitude'),
                'lon': location_data.get('longitude'),
                'accuracy': location_data.get('accuracy')
            }
        }
        
    except Exception as e:
        logger.error(f"Error in check-in: {e}")
        return {
            'success': False,
            'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø—Ä–∏—Ö–æ–¥–∞: {str(e)}'
        }

async def handle_check_out(user_id: int, user_name: str, location_data: dict):
    """Handle check-out with high accuracy location"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        active_session = await db.get_active_session(user_id)
        if not active_session:
            return {
                'success': False,
                'message': '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏'
            }
        
        # –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        duration = await db.end_work_session(
            user_id=user_id,
            location_lat=location_data.get('latitude'),
            location_lon=location_data.get('longitude'),
            extra_data=json.dumps({
                'accuracy': location_data.get('accuracy'),
                'altitude': location_data.get('altitude'),
                'network_info': location_data.get('network_info'),
                'high_accuracy': True,
                'timestamp': location_data.get('timestamp')
            })
        )
        
        hours = duration // 60
        minutes = duration % 60
        
        return {
            'success': True,
            'message': f'–£—Ö–æ–¥ —Å —Ä–∞–±–æ—Ç—ã –æ—Ç–º–µ—á–µ–Ω! –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {hours}—á {minutes}–º (–¢–æ—á–Ω–æ—Å—Ç—å: ¬±{int(location_data.get("accuracy", 0))}–º)',
            'duration': duration,
            'location': {
                'lat': location_data.get('latitude'),
                'lon': location_data.get('longitude'),
                'accuracy': location_data.get('accuracy')
            }
        }
        
    except Exception as e:
        logger.error(f"Error in check-out: {e}")
        return {
            'success': False,
            'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —É—Ö–æ–¥–∞: {str(e)}'
        }

async def get_location_stats(request):
    """Get location statistics"""
    try:
        user_id = request.query.get('user_id')
        if not user_id:
            return web.json_response({'error': 'user_id required'}, status=400)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats = await db.get_user_stats(int(user_id))
        
        return web.json_response({
            'success': True,
            'stats': stats
        })
        
    except Exception as e:
        logger.error(f"Error getting stats: {e}")
        return web.json_response({'error': 'Server error'}, status=500)

def setup_routes(app):
    """Setup web routes"""
    # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
    app.router.add_get('/web_location.html', serve_web_app)
    
    # API endpoints
    app.router.add_post('/api/location', handle_location_data)
    app.router.add_get('/api/stats', get_location_stats)
    
    # CORS headers –¥–ª—è –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
    async def add_cors_headers(request, handler):
        response = await handler(request)
        response.headers['Access-Control-Allow-Origin'] = '*'
        response.headers['Access-Control-Allow-Methods'] = 'GET, POST, OPTIONS'
        response.headers['Access-Control-Allow-Headers'] = 'Content-Type'
        return response
    
    app.middlewares.append(add_cors_headers)

async def create_app():
    """Create and configure web application"""
    app = web.Application()
    setup_routes(app)
    return app

async def start_web_server():
    """Start the web server"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.init_db()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = await create_app()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        runner = web.AppRunner(app)
        await runner.setup()
        
        site = web.TCPSite(runner, 'localhost', 8000)
        await site.start()
        
        logger.info("üåê Web server started at http://localhost:8000")
        logger.info("üì± Web App URL: http://localhost:8000/web_location.html")
        
        # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
        await asyncio.Event().wait()
        
    except Exception as e:
        logger.error(f"Error starting web server: {e}")

if __name__ == "__main__":
    asyncio.run(start_web_server()) 