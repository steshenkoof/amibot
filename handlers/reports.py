from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from datetime import datetime, date, timedelta

from database import db
from utils.excel_export import format_duration, create_user_report, create_admin_report, cleanup_temp_file
from config import ADMIN_IDS

router = Router()

@router.message(F.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_user_stats(message: types.Message):
    """Show user statistics with period selection"""
    # Check if user is approved
    status = await db.get_user_status(message.from_user.id)
    if status != 'approved':
        await message.answer(
            "‚ùå **–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω**\n\n"
            "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="stats_today"),
            InlineKeyboardButton(text="üìÖ –≠—Ç–∞ –Ω–µ–¥–µ–ª—è", callback_data="stats_week")
        ],
        [
            InlineKeyboardButton(text="üìÖ –≠—Ç–æ—Ç –º–µ—Å—è—Ü", callback_data="stats_month"),
            InlineKeyboardButton(text="üìÖ –í—Å–µ –≤—Ä–µ–º—è", callback_data="stats_all")
        ]
    ])
    
    await message.answer(
        "üìä **–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:**",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("stats_"))
async def handle_stats_callback(callback: types.CallbackQuery):
    """Handle statistics period selection"""
    period = callback.data.split("_")[1]
    user_id = callback.from_user.id
    
    # Determine number of days based on period
    if period == "today":
        days = 1
        period_name = "—Å–µ–≥–æ–¥–Ω—è"
    elif period == "week":
        days = 7
        period_name = "–∑–∞ –Ω–µ–¥–µ–ª—é"
    elif period == "month":
        days = 30
        period_name = "–∑–∞ –º–µ—Å—è—Ü"
    else:  # all
        days = 365
        period_name = "–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è"
    
    # Get statistics
    stats = await db.get_user_stats(user_id, days)
    
    if not stats:
        await callback.message.edit_text(
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {period_name}**\n\n"
            f"–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç. –ù–∞—á–Ω–∏—Ç–µ –æ—Ç–º–µ—á–∞—Ç—å —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è!"
        )
        await callback.answer()
        return
    
    # Calculate totals
    total_minutes = sum(session['duration_minutes'] for session in stats)
    total_days = len([s for s in stats if s['duration_minutes'] > 0])
    avg_minutes = total_minutes // total_days if total_days > 0 else 0
    
    # Build stats message
    stats_text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {period_name}**\n\n"
    stats_text += f"üìà **–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
    stats_text += f"‚Ä¢ –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {format_duration(total_minutes)}\n"
    stats_text += f"‚Ä¢ –†–∞–±–æ—á–∏—Ö –¥–Ω–µ–π: {total_days}\n"
    stats_text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {format_duration(avg_minutes)}\n\n"
    
    # Show recent sessions (last 5)
    if period == "today" and stats:
        session = stats[0]
        if session['check_in']:
            check_in_time = datetime.fromisoformat(session['check_in']).strftime("%H:%M")
            stats_text += f"üïê **–°–µ–≥–æ–¥–Ω—è:**\n"
            stats_text += f"‚Ä¢ –ü—Ä–∏—Ö–æ–¥: {check_in_time}\n"
            
            if session['check_out']:
                check_out_time = datetime.fromisoformat(session['check_out']).strftime("%H:%M")
                stats_text += f"‚Ä¢ –£—Ö–æ–¥: {check_out_time}\n"
                stats_text += f"‚Ä¢ –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {format_duration(session['duration_minutes'])}\n"
            else:
                current_time = datetime.now()
                check_in_dt = datetime.fromisoformat(session['check_in'])
                current_duration = int((current_time - check_in_dt).total_seconds() / 60)
                stats_text += f"‚Ä¢ –°–µ–π—á–∞—Å –Ω–∞ —Ä–∞–±–æ—Ç–µ\n"
                stats_text += f"‚Ä¢ –£–∂–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {format_duration(current_duration)}\n"
    else:
        stats_text += f"üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:**\n"
        for session in stats[:5]:
            if session['duration_minutes'] > 0:
                date_str = session['date']
                duration_str = format_duration(session['duration_minutes'])
                stats_text += f"‚Ä¢ {date_str}: {duration_str}\n"
    
    await callback.message.edit_text(stats_text, parse_mode="Markdown")
    await callback.answer()

@router.message(F.text == "üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç")
async def download_report_menu(message: types.Message):
    """Show download report menu"""
    user_id = message.from_user.id
    
    # Check if user is approved
    status = await db.get_user_status(user_id)
    if status != 'approved':
        await message.answer(
            "‚ùå **–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω**\n\n"
            "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="report_week"),
            InlineKeyboardButton(text="üìä –ó–∞ –º–µ—Å—è—Ü", callback_data="report_month")
        ],
        [
            InlineKeyboardButton(text="üìä –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è", callback_data="report_all")
        ]
    ])
    
    # Add admin options if user is admin
    if user_id in ADMIN_IDS:
        admin_row = [
            InlineKeyboardButton(text="üë• –í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ (–º–µ—Å—è—Ü)", callback_data="admin_report_month"),
            InlineKeyboardButton(text="üë• –í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ (–Ω–µ–¥–µ–ª—è)", callback_data="admin_report_week")
        ]
        keyboard.inline_keyboard.append(admin_row)
    
    await message.answer(
        "üì• **–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á—ë—Ç–∞:**\n\n"
        "–û—Ç—á—ë—Ç –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel.",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("report_"))
async def handle_report_callback(callback: types.CallbackQuery):
    """Handle report generation"""
    period = callback.data.split("_")[1]
    user_id = callback.from_user.id
    user = callback.from_user
    
    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç...")
    
    # Determine period
    if period == "week":
        days = 7
        period_name = "–Ω–µ–¥–µ–ª—è"
    elif period == "month":
        days = 30
        period_name = "–º–µ—Å—è—Ü"
    else:  # all
        days = 365
        period_name = "–≤—Å–µ_–≤—Ä–µ–º—è"
    
    try:
        # Get user statistics
        stats = await db.get_user_stats(user_id, days)
        
        if not stats:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞.\n"
                "–ù–∞—á–Ω–∏—Ç–µ –æ—Ç–º–µ—á–∞—Ç—å —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è!"
            )
            await callback.answer()
            return
        
        # Generate Excel file
        username = user.username or user.first_name or "Unknown"
        file_path = create_user_report(stats, username)
        
        # Send file
        file = FSInputFile(file_path)
        filename = f"–û—Ç—á–µ—Ç_{username}_{period_name}_{date.today().strftime('%Y%m%d')}.xlsx"
        
        await callback.message.answer_document(
            file,
            caption=f"üìä **–û—Ç—á—ë—Ç –ø–æ —Ä–∞–±–æ—á–µ–º—É –≤—Ä–µ–º–µ–Ω–∏**\n\n"
                   f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {user.full_name or username}\n"
                   f"üìÖ –ü–µ—Ä–∏–æ–¥: {period_name}\n"
                   f"üìÑ –§–∞–π–ª: {filename}",
            parse_mode="Markdown"
        )
        
        # Clean up
        cleanup_temp_file(file_path)
        
        await callback.message.edit_text("‚úÖ –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
        
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {str(e)}"
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("admin_report_"))
async def handle_admin_report_callback(callback: types.CallbackQuery):
    """Handle admin report generation"""
    user_id = callback.from_user.id
    
    # Check if user is admin
    if user_id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    period = callback.data.split("_")[2]
    
    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º...")
    
    # Determine period
    if period == "week":
        days = 7
        period_name = "–Ω–µ–¥–µ–ª—è"
    else:  # month
        days = 30
        period_name = "–º–µ—Å—è—Ü"
    
    try:
        # Calculate date range
        end_date = date.today()
        start_date = end_date - timedelta(days=days)
        
        # Get all users statistics
        all_stats = await db.get_all_users_stats(
            start_date.strftime('%Y-%m-%d'),
            end_date.strftime('%Y-%m-%d')
        )
        
        if not all_stats:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞."
            )
            await callback.answer()
            return
        
        # Generate Excel file
        file_path = create_admin_report(
            all_stats,
            start_date.strftime('%Y-%m-%d'),
            end_date.strftime('%Y-%m-%d')
        )
        
        # Send file
        file = FSInputFile(file_path)
        filename = f"–û—Ç—á–µ—Ç_–≤—Å–µ_—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏_{period_name}_{date.today().strftime('%Y%m%d')}.xlsx"
        
        await callback.message.answer_document(
            file,
            caption=f"üìä **–û—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º**\n\n"
                   f"üìÖ –ü–µ—Ä–∏–æ–¥: {period_name} ({start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')})\n"
                   f"üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(set(s['user_id'] for s in all_stats))}\n"
                   f"üìÑ –§–∞–π–ª: {filename}",
            parse_mode="Markdown"
        )
        
        # Clean up
        cleanup_temp_file(file_path)
        
        await callback.message.edit_text("‚úÖ –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
        
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {str(e)}"
        )
    
    await callback.answer() 