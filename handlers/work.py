from aiogram import Router, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from datetime import datetime

from database import db
from utils.geolocation import is_within_office_radius, get_distance_to_office
from utils.excel_export import format_duration

router = Router()

@router.message(F.location)
async def handle_location_check_in(message: types.Message):
    """Handle location for check-in"""
    user = message.from_user
    location = message.location
    
    # Check if user is approved
    status = await db.get_user_status(user.id)
    if status != 'approved':
        await message.answer(
            "‚ùå **–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω**\n\n"
            "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        return
    
    # Update user info
    await db.add_or_update_user(
        user.id, 
        user.username, 
        user.full_name or f"{user.first_name} {user.last_name or ''}".strip()
    )
    
    # Check if within office radius
    if not is_within_office_radius(location.latitude, location.longitude):
        distance = get_distance_to_office(location.latitude, location.longitude)
        await message.answer(
            f"‚ùå **–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤–Ω–µ –∑–æ–Ω—ã –æ—Ñ–∏—Å–∞**\n\n"
            f"üìç –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ—Ñ–∏—Å–∞: {distance:.0f} –º\n"
            f"–î–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–∏—Ö–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–∞–¥–∏—É—Å–µ 100 –º –æ—Ç –æ—Ñ–∏—Å–∞.",
            parse_mode="Markdown"
        )
        return
    
    # Try to check in
    success = await db.check_in(
        user.id,
        user.username or "Unknown",
        user.full_name or f"{user.first_name} {user.last_name or ''}".strip(),
        location.latitude,
        location.longitude
    )
    
    if success:
        current_time = datetime.now().strftime("%H:%M")
        await message.answer(
            f"‚úÖ **–û—Ç–º–µ—á–µ–Ω –ø—Ä–∏—Ö–æ–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É!**\n\n"
            f"üïê –í—Ä–µ–º—è: {current_time}\n"
            f"üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\n\n"
            f"–•–æ—Ä–æ—à–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è! üòä",
            parse_mode="Markdown"
        )
    else:
        await message.answer(
            f"‚ö†Ô∏è **–í—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏ –ø—Ä–∏—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è**\n\n"
            f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"üî¥ –Ø —É—Ö–æ–∂—É\""
        )

@router.message(F.text == "üü¢ –Ø –Ω–∞ —Ä–∞–±–æ—Ç–µ")
async def handle_check_in_button(message: types.Message):
    """Handle check-in button press"""
    user = message.from_user
    
    # Check if user is approved
    status = await db.get_user_status(user.id)
    if status != 'approved':
        await message.answer(
            "‚ùå **–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω**\n\n"
            "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        return
    
    # Check if already checked in today
    today_session = await db.get_today_session(user.id)
    if today_session and today_session['check_in']:
        check_in_time = datetime.fromisoformat(today_session['check_in']).strftime("%H:%M")
        await message.answer(
            f"‚ö†Ô∏è **–í—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏ –ø—Ä–∏—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è**\n\n"
            f"üïê –í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞: {check_in_time}\n\n"
            f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"üî¥ –Ø —É—Ö–æ–∂—É\""
        )
        return
    
    # Request location
    location_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        f"üìç **–î–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–∏—Ö–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é**\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º.\n"
        f"–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ—Ñ–∏—Å–µ.",
        reply_markup=location_keyboard
    )

@router.message(F.text == "üî¥ –Ø —É—Ö–æ–∂—É")
async def handle_check_out(message: types.Message):
    """Handle check-out"""
    user = message.from_user
    
    # Check if user is approved
    status = await db.get_user_status(user.id)
    if status != 'approved':
        await message.answer(
            "‚ùå **–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω**\n\n"
            "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        return
    
    # Update user info
    await db.add_or_update_user(
        user.id, 
        user.username, 
        user.full_name or f"{user.first_name} {user.last_name or ''}".strip()
    )
    
    # Try to check out
    duration_minutes = await db.check_out(user.id)
    
    if duration_minutes is not None:
        current_time = datetime.now().strftime("%H:%M")
        duration_formatted = format_duration(duration_minutes)
        
        await message.answer(
            f"‚úÖ **–û—Ç–º–µ—á–µ–Ω —É—Ö–æ–¥ —Å —Ä–∞–±–æ—Ç—ã!**\n\n"
            f"üïê –í—Ä–µ–º—è —É—Ö–æ–¥–∞: {current_time}\n"
            f"‚è± –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {duration_formatted}\n\n"
            f"–î–æ –≤—Å—Ç—Ä–µ—á–∏ –∑–∞–≤—Ç—Ä–∞! üëã",
            parse_mode="Markdown"
        )
    else:
        await message.answer(
            f"‚ö†Ô∏è **–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏**\n\n"
            f"–°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—Ç—å—Ç–µ –ø—Ä–∏—Ö–æ–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ \"üü¢ –Ø –Ω–∞ —Ä–∞–±–æ—Ç–µ\""
        )

@router.message(F.text == "üè¢ –†–∞–±–æ—á–µ–µ –º–µ–Ω—é")
async def work_menu(message: types.Message):
    """Show work menu with location options"""
    user = message.from_user
    
    # Check if user is approved
    status = await db.get_user_status(user.id)
    if status != 'approved':
        await message.answer(
            "‚ùå **–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω**\n\n"
            "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        return
    
    keyboard = InlineKeyboardBuilder()
    
    # Check today's session to show appropriate buttons
    today_session = await db.get_today_session(user.id)
    
    if not today_session or not today_session['check_in']:
        # Can check in
        keyboard.button(text="üìç –ü—Ä–∏—à–µ–ª –Ω–∞ —Ä–∞–±–æ—Ç—É", callback_data="checkin_location")
    elif today_session['check_in'] and not today_session['check_out']:
        # Can check out
        keyboard.button(text="üö™ –£—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã", callback_data="checkout_location")
    else:
        # Already completed today
        keyboard.button(text="‚úÖ –†–∞–±–æ—á–∏–π –¥–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω", callback_data="work_completed")
    
    # Additional options
    keyboard.button(text="üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="work_status")
    keyboard.button(text="üìà –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="work_stats")
    
    keyboard.adjust(1, 2)
    
    await message.answer(
        "üè¢ **–†–∞–±–æ—á–µ–µ –º–µ–Ω—é**\n\n"
        "üìç **–ß—Ç–æ —ç—Ç–æ?** –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.\n\n"
        "**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
        "‚Ä¢ –û—Ç–º–µ—Ç–∫–∞ –ø—Ä–∏—Ö–æ–¥–∞/—É—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏\n"
        "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞\n"
        "‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "checkin_location")
async def checkin_location_callback(callback: types.CallbackQuery):
    """Handle check-in via inline button"""
    await callback.message.edit_text(
        "üìç **–û—Ç–º–µ—Ç–∫–∞ –ø—Ä–∏—Ö–æ–¥–∞**\n\n"
        "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É **üü¢ –Ø –Ω–∞ —Ä–∞–±–æ—Ç–µ** –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é.",
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "checkout_location")
async def checkout_location_callback(callback: types.CallbackQuery):
    """Handle check-out via inline button"""
    user_id = callback.from_user.id
    
    # Try to check out
    duration_minutes = await db.check_out(user_id)
    
    if duration_minutes is not None:
        current_time = datetime.now().strftime("%H:%M")
        duration_formatted = format_duration(duration_minutes)
        
        await callback.message.edit_text(
            f"‚úÖ **–û—Ç–º–µ—á–µ–Ω —É—Ö–æ–¥ —Å —Ä–∞–±–æ—Ç—ã!**\n\n"
            f"üïê –í—Ä–µ–º—è —É—Ö–æ–¥–∞: {current_time}\n"
            f"‚è± –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {duration_formatted}\n\n"
            f"–î–æ –≤—Å—Ç—Ä–µ—á–∏ –∑–∞–≤—Ç—Ä–∞! üëã",
            parse_mode="Markdown"
        )
    else:
        await callback.message.edit_text(
            f"‚ö†Ô∏è **–û—à–∏–±–∫–∞**\n\n"
            f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏.\n"
            f"–°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—Ç—å—Ç–µ –ø—Ä–∏—Ö–æ–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É.",
            parse_mode="Markdown"
        )
    
    await callback.answer()

@router.callback_query(F.data == "work_status")
async def work_status_callback(callback: types.CallbackQuery):
    """Show current work status"""
    user_id = callback.from_user.id
    today_session = await db.get_today_session(user_id)
    
    if not today_session:
        status_text = "üìä **–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å**\n\n‚ùå –°–µ–≥–æ–¥–Ω—è –Ω–µ –æ—Ç–º–µ—á–∞–ª—Å—è"
    elif today_session['check_in'] and not today_session['check_out']:
        check_in_time = datetime.fromisoformat(today_session['check_in']).strftime('%H:%M')
        current_time = datetime.now()
        check_in_dt = datetime.fromisoformat(today_session['check_in'])
        current_duration = int((current_time - check_in_dt).total_seconds() / 60)
        
        status_text = (
            f"üìä **–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å**\n\n"
            f"‚úÖ –ù–∞ —Ä–∞–±–æ—Ç–µ\n"
            f"üïê –ü—Ä–∏—à–µ–ª: {check_in_time}\n"
            f"‚è± –£–∂–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {format_duration(current_duration)}"
        )
    else:
        check_in_time = datetime.fromisoformat(today_session['check_in']).strftime('%H:%M')
        check_out_time = datetime.fromisoformat(today_session['check_out']).strftime('%H:%M')
        
        status_text = (
            f"üìä **–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å**\n\n"
            f"‚úÖ –†–∞–±–æ—á–∏–π –¥–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω\n"
            f"üïê –ü—Ä–∏—à–µ–ª: {check_in_time}\n"
            f"üïê –£—à–µ–ª: {check_out_time}\n"
            f"‚è± –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {format_duration(today_session['duration_minutes'])}"
        )
    
    await callback.message.edit_text(status_text, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "work_stats")
async def work_stats_callback(callback: types.CallbackQuery):
    """Show quick work statistics"""
    user_id = callback.from_user.id
    
    # Get stats for last 7 days
    stats = await db.get_user_stats(user_id, 7)
    
    if not stats:
        await callback.message.edit_text(
            "üìà **–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
            "–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç. –ù–∞—á–Ω–∏—Ç–µ –æ—Ç–º–µ—á–∞—Ç—å —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è!"
        )
        await callback.answer()
        return
    
    # Calculate totals
    total_minutes = sum(session['duration_minutes'] for session in stats)
    total_days = len([s for s in stats if s['duration_minutes'] > 0])
    avg_minutes = total_minutes // total_days if total_days > 0 else 0
    
    stats_text = (
        f"üìà **–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (7 –¥–Ω–µ–π)**\n\n"
        f"‚è± –í—Å–µ–≥–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {format_duration(total_minutes)}\n"
        f"üìÖ –†–∞–±–æ—á–∏—Ö –¥–Ω–µ–π: {total_days}\n"
        f"üìä –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {format_duration(avg_minutes)}\n\n"
        f"–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ **üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
    )
    
    await callback.message.edit_text(stats_text, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "work_completed")
async def work_completed_callback(callback: types.CallbackQuery):
    """Handle completed work day"""
    await callback.message.edit_text(
        "‚úÖ **–†–∞–±–æ—á–∏–π –¥–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω**\n\n"
        "–í—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏ –ø—Ä–∏—Ö–æ–¥ –∏ —É—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è.\n"
        "–£–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞! üëã",
        parse_mode="Markdown"
    )
    await callback.answer()

@router.message(Command("work"))
async def work_command(message: types.Message):
    """Handle /work command - same as work menu button"""
    # Reuse the work menu function
    await work_menu(message)

# –£–¥–∞–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è 4-—à–∞–≥–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è 