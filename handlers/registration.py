from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton

from database import db
from config import ADMIN_IDS

router = Router()

class Registration(StatesGroup):
    waiting_for_name = State()
    waiting_for_surname = State()
    waiting_for_phone = State()
    waiting_for_category = State()

@router.message(F.text == "üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
async def start_registration(message: types.Message, state: FSMContext):
    msg = await message.answer(
        "üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É—á–µ—Ç–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!**\n\n"
        "üìù **–®–∞–≥ 1 –∏–∑ 4: –ò–º—è**\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True,
            one_time_keyboard=True
        ),
        parse_mode="Markdown"
    )
    await state.set_state(Registration.waiting_for_name)

@router.message(Registration.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")]], resize_keyboard=True, one_time_keyboard=True), parse_mode="Markdown")
        await state.clear()
        return
    name = message.text.strip()
    if len(name) < 2:
        await message.answer(
            "‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):"
        )
        return
    await state.update_data(name=name)
    await message.answer(
        f"‚úÖ **–ò–º—è:** {name}\n\n"
        f"üìù **–®–∞–≥ 2 –∏–∑ 4: –§–∞–º–∏–ª–∏—è**\n\n"
        f"–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True,
            one_time_keyboard=True
        ),
        parse_mode="Markdown"
    )
    await state.set_state(Registration.waiting_for_surname)

@router.message(Registration.waiting_for_surname)
async def process_surname(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        prev_name = data.get("name", "")
        await message.answer(
            "üìù **–®–∞–≥ 1 –∏–∑ 4: –ò–º—è**\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True,
                one_time_keyboard=True
            ),
            parse_mode="Markdown"
        )
        await state.set_state(Registration.waiting_for_name)
        return
    surname = message.text.strip()
    if len(surname) < 2:
        await message.answer(
            "‚ùå –§–∞–º–∏–ª–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):"
        )
        return
    await state.update_data(surname=surname)
    phone_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)], [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(
        f"‚úÖ **–§–∞–º–∏–ª–∏—è:** {surname}\n\n"
        f"üìù **–®–∞–≥ 3 –∏–∑ 4: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞**\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:",
        reply_markup=phone_keyboard,
        parse_mode="Markdown"
    )
    await state.set_state(Registration.waiting_for_phone)

@router.message(Registration.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        prev_surname = data.get("surname", "")
        await message.answer(
            f"üìù **–®–∞–≥ 2 –∏–∑ 4: –§–∞–º–∏–ª–∏—è**\n\n"
            f"–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True,
                one_time_keyboard=True
            ),
            parse_mode="Markdown"
        )
        await state.set_state(Registration.waiting_for_surname)
        return
    phone = None
    if message.contact:
        phone = message.contact.phone_number
    elif message.text:
        import re
        phone_text = message.text.strip()
        if re.match(r'^[\+]?[1-9][\d\s\-\(\)]{7,15}$', phone_text):
            phone = phone_text
        else:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +380123456789 –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏."
            )
            return
    else:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏."
        )
        return
    await state.update_data(phone=phone)
    category_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üç≥ –ö—É—Ö–Ω—è", callback_data="category_–∫—É—Ö–Ω—è"),
            InlineKeyboardButton(text="üçΩ –ó–∞–ª", callback_data="category_–∑–∞–ª")
        ],
        [
            InlineKeyboardButton(text="üßΩ –ú–æ–π–∫–∞", callback_data="category_–º–æ–π–∫–∞"),
            InlineKeyboardButton(text="üçª –ë–∞—Ä", callback_data="category_–±–∞—Ä")
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="category_back")
        ]
    ])
    await message.answer(
        f"‚úÖ **–¢–µ–ª–µ—Ñ–æ–Ω:** {phone}\n\n"
        f"üìù **–®–∞–≥ 4 –∏–∑ 4: –í–∞—à–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è**\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–º–ø–∞–Ω–∏–∏:",
        reply_markup=category_keyboard,
        parse_mode="Markdown"
    )
    await state.set_state(Registration.waiting_for_category)

@router.callback_query(Registration.waiting_for_category, F.data == "category_back")
async def category_back_callback(callback: types.CallbackQuery, state: FSMContext):
    prev_phone = await state.get_data()
    phone_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)], [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await callback.message.edit_text(
        f"üìù **–®–∞–≥ 3 –∏–∑ 4: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞**\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:",
        reply_markup=phone_keyboard,
        parse_mode="Markdown"
    )
    await state.set_state(Registration.waiting_for_phone)
    await callback.answer()

@router.callback_query(Registration.waiting_for_category, F.data.startswith("category_"))
async def process_category(callback: types.CallbackQuery, state: FSMContext):
    """Process category selection"""
    category = callback.data.split("_")[1]
    
    # Get all data from state
    data = await state.get_data()
    name = data.get('name')
    surname = data.get('surname')
    phone = data.get('phone')
    
    user = callback.from_user
    display_name = f"{name} {surname}"
    
    # Register user with all information
    await db.register_user_extended(
        user.id,
        user.username,
        user.full_name or f"{user.first_name} {user.last_name or ''}".strip(),
        display_name,
        phone,
        category
    )
    
    # Notify admins about new registration
    await notify_admins_about_registration(
        user.id, 
        display_name, 
        user.username, 
        phone, 
        category
    )
    
    category_emoji = {"–∫—É—Ö–Ω—è": "üç≥", "–∑–∞–ª": "üçΩ", "–º–æ–π–∫–∞": "üßΩ", "–±–∞—Ä": "üçª"}
    
    await callback.message.edit_text(
        f"‚úÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
        f"üë§ **–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:**\n"
        f"‚Ä¢ –ò–º—è: {name}\n"
        f"‚Ä¢ –§–∞–º–∏–ª–∏—è: {surname}\n"
        f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {category_emoji.get(category, 'üë§')} {category.title()}\n\n"
        f"üôè **–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!**\n"
        f"‚è≥ –ñ–¥–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
        f"–ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ—Ç–º–µ—á–∞—Ç—å —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.",
        parse_mode="Markdown"
    )
    
    await state.clear()
    await callback.answer()

async def notify_admins_about_registration(user_id: int, display_name: str, username: str, phone: str, category: str):
    """Notify admins about new registration"""
    from bot import bot  # Import bot instance
    
    category_emoji = {"–∫—É—Ö–Ω—è": "üç≥", "–∑–∞–ª": "üçΩ", "–º–æ–π–∫–∞": "üßΩ", "–±–∞—Ä": "üçª"}
    
    admin_message = (
        f"üîî **–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è**\n\n"
        f"üë§ **–î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:**\n"
        f"‚Ä¢ –ò–º—è: {display_name}\n"
        f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {category_emoji.get(category, 'üë§')} {category.title()}\n"
        f"‚Ä¢ ID: {user_id}\n"
        f"‚Ä¢ Username: @{username if username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        f"–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
        f"/start –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"
    )
    
    # Send notification to all admins
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                admin_id,
                admin_message,
                parse_mode="Markdown"
            )
        except Exception as e:
            # Log error but don't fail registration
            print(f"Failed to notify admin {admin_id}: {e}") 