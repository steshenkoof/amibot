from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, date, timedelta
import logging

from database import db
from config import ADMIN_IDS, OFFICE_LATITUDE, OFFICE_LONGITUDE
from utils.excel_export import format_duration

router = Router()
logger = logging.getLogger(__name__)

class ManualCheck(StatesGroup):
    select_user_checkin = State()
    enter_time_checkin = State()
    select_user_checkout = State()
    enter_time_checkout = State()
    waiting_for_category = State()
    waiting_for_confirmation = State()

class UserManagement(StatesGroup):
    waiting_for_category = State()
    waiting_for_confirmation = State()

async def get_admin_panel_keyboard() -> InlineKeyboardMarkup:
    """Returns the main admin panel keyboard."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏", callback_data="admin_users")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á—ë—Ç—ã", callback_data="admin_stats")],
        [
            InlineKeyboardButton(text="‚ûï –ü—Ä–∏—Ö–æ–¥ –≤—Ä—É—á–Ω—É—é", callback_data="manual_checkin_start"),
            InlineKeyboardButton(text="‚ûñ –£—Ö–æ–¥ –≤—Ä—É—á–Ω—É—é", callback_data="manual_checkout_start")
        ]
    ])

@router.message(F.text == "üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message, state: FSMContext):
    await state.clear()
    keyboard = await get_admin_panel_keyboard()
    await message.answer(
        "üë®‚Äçüíº <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(F.data == "admin_back")
async def admin_back_button(callback: types.CallbackQuery, state: FSMContext):
    """Go back to main admin menu by deleting old message and sending a new one."""
    await state.clear()
    
    try:
        # Delete the message with the inline keyboard
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"Could not delete message on admin_back: {e}")

    # Send a new message with the main admin panel
    keyboard = await get_admin_panel_keyboard()
    await callback.message.answer(
        "üë®‚Äçüíº <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "admin_users")
async def show_employee_management_menu(callback: types.CallbackQuery, state: FSMContext):
    """Shows the main employee management menu."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", callback_data="admin_all_users_status")],
        [InlineKeyboardButton(text="‚è≥ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞—è–≤–∫–∏", callback_data="admin_pending")],
        [InlineKeyboardButton(text="üóÉ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data="admin_archive_user")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "admin_all_users_status")
async def show_all_users_by_status(callback: types.CallbackQuery):
    """Displays a list of all approved users, grouped by department."""
    users = await db.get_users_by_status('approved')
    
    if not users:
        await callback.message.edit_text(
            "üë• <b>–í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏</b>\n\n–ù–µ—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]
            ]),
            parse_mode="HTML"
        )
        await callback.answer()
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {"–∫—É—Ö–Ω—è": [], "–∑–∞–ª": [], "–º–æ–π–∫–∞": [], "–±–∞—Ä": []}
    for user in users:
        category = user.get('category', '–∑–∞–ª')
        if category in categories:
            categories[category].append(user)
    
    message_text = "üë• <b>–í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏</b>\n\n"
    emoji_map = {"–∫—É—Ö–Ω—è": "üç≥", "–∑–∞–ª": "üçΩ", "–º–æ–π–∫–∞": "üßΩ", "–±–∞—Ä": "üçª"}
    
    keyboard_buttons = []
    
    for category, users_list in categories.items():
        if users_list:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
            message_text += f"{emoji_map[category]} <b>{category.upper()}</b> ({len(users_list)})\n"
            
            for user in users_list:
                name = user['display_name'] or user['full_name'] or 'Unknown'
                user_id = user['user_id']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–Ω–∞ —Å–º–µ–Ω–µ –∏–ª–∏ –Ω–µ—Ç)
                session = await db.get_today_session(user_id)
                status_emoji = "üü¢" if session and session['check_in'] and not session['check_out'] else "üî¥"
                
                message_text += f"{status_emoji} {name}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"{status_emoji} {name}", 
                        callback_data=f"user_stats_{user_id}"
                    )
                ])
            
            message_text += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.edit_text(
        text=message_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("user_stats_"))
async def show_user_detailed_stats(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."""
    user_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = await db.get_user_info(user_id)
    if not user_info:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    name = user_info['display_name'] or user_info['full_name']
    category = user_info.get('category', '–∑–∞–ª')
    emoji_map = {"–∫—É—Ö–Ω—è": "üç≥", "–∑–∞–ª": "üçΩ", "–º–æ–π–∫–∞": "üßΩ", "–±–∞—Ä": "üçª"}
    category_emoji = emoji_map.get(category, "üìã")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
    today_stats = await db.get_user_stats(user_id, 1)
    week_stats = await db.get_user_stats(user_id, 7)
    month_stats = await db.get_user_stats(user_id, 30)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    today_minutes = sum(session['duration_minutes'] for session in today_stats)
    week_minutes = sum(session['duration_minutes'] for session in week_stats)
    month_minutes = sum(session['duration_minutes'] for session in month_stats)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞ —Å–º–µ–Ω–µ –ª–∏ —Å–µ–π—á–∞—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
    today_session = await db.get_today_session(user_id)
    is_active = today_session and today_session['check_in'] and not today_session['check_out']
    
    if is_active:
        status = "üü¢ –ù–∞ —Å–º–µ–Ω–µ"
        check_in_time = datetime.fromisoformat(today_session['check_in']).strftime('%H:%M')
        current_time = datetime.now()
        check_in_dt = datetime.fromisoformat(today_session['check_in'])
        current_duration = int((current_time - check_in_dt).total_seconds() / 60)
        today_minutes = current_duration  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
    else:
        status = "üî¥ –ù–µ –Ω–∞ —Å–º–µ–Ω–µ"
        check_in_time = None
        current_duration = 0
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = f"üë§ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>\n\n"
    message_text += f"<b>–ò–º—è:</b> {name}\n"
    message_text += f"<b>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</b> {category_emoji} {category.upper()}\n"
    message_text += f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n"
    
    message_text += "<b>–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Ä–µ–º–µ–Ω–∏:</b>\n"
    message_text += f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {format_duration(today_minutes)}\n"
    message_text += f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {format_duration(week_minutes)}\n"
    message_text += f"‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {format_duration(month_minutes)}\n\n"
    
    if is_active:
        message_text += f"<b>–¢–µ–∫—É—â–∞—è —Å–º–µ–Ω–∞:</b>\n"
        message_text += f"‚Ä¢ –ù–∞—á–∞–ª–æ: {check_in_time}\n"
        message_text += f"‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {format_duration(current_duration)}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", callback_data="admin_all_users_status")]
    ])
    
    await callback.message.edit_text(
        text=message_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "admin_stats")
async def show_stats_menu(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üç≥ –ö—É—Ö–Ω—è", callback_data="stats_category_–∫—É—Ö–Ω—è"),
         InlineKeyboardButton(text="üçΩ –ó–∞–ª", callback_data="stats_category_–∑–∞–ª")],
        [InlineKeyboardButton(text="üßΩ –ú–æ–π–∫–∞", callback_data="stats_category_–º–æ–π–∫–∞"),
         InlineKeyboardButton(text="üçª –ë–∞—Ä", callback_data="stats_category_–±–∞—Ä")],
        [InlineKeyboardButton(text="üìÖ –û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥", callback_data="admin_period_reports")],
        [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π Excel", callback_data="admin_report_menu")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    await callback.message.edit_text("üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á—ë—Ç—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

async def _update_pending_list(message: types.Message):
    """Helper function to generate and display the list of pending users."""
    pending_users = await db.get_pending_users()
    
    if not pending_users:
        await message.edit_text(
            "üìã <b>–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</b>\n\n–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]
            ]),
            parse_mode="HTML"
        )
        return

    message_text = "‚è≥ <b>–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n\n"
    keyboard_buttons = []
    
    for user in pending_users:
        user_info = (
            f"üë§ <b>{user['display_name']}</b> (<i>@{user.get('username', 'N/A')}</i>)\n"
            f"   - ID: <code>{user['user_id']}</code>\n"
            f"   - –¢–µ–ª–µ—Ñ–æ–Ω: {user.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"   - –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {user.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞').title()}\n"
        )
        message_text += user_info + "\n"
        keyboard_buttons.append([
            InlineKeyboardButton(text=f"‚úÖ –û–¥–æ–±—Ä–∏—Ç—å {user['display_name']}", callback_data=f"approve_{user['user_id']}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user['user_id']}")
        ])
    
    keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")])
    
    await message.edit_text(
        message_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "admin_pending")
async def show_pending_users(callback: types.CallbackQuery):
    """Show pending registrations by calling the helper."""
    await _update_pending_list(callback.message)
    await callback.answer()

@router.callback_query(F.data.startswith("approve_"))
async def approve_user(callback: types.CallbackQuery):
    """Approve user registration"""
    user_id = int(callback.data.split("_")[1])
    admin_id = callback.from_user.id
    
    await db.approve_user(user_id, admin_id)
    
    try:
        from bot import bot
        await bot.send_message(
            user_id,
            "üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n"
            "‚úÖ **–í—ã –ø—Ä–∏–Ω—è—Ç—ã –Ω–∞ —Ä–∞–±–æ—Ç—É!**\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞—á–∞—Ç—å –æ—Ç–º–µ—á–∞—Ç—å —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.",
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"Failed to notify approved user {user_id}: {e}")
    
    await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω!", show_alert=True)
    
    await _update_pending_list(callback.message)

@router.callback_query(F.data.startswith("reject_"))
async def reject_user(callback: types.CallbackQuery):
    """Reject user registration"""
    user_id = int(callback.data.split("_")[1])
    admin_id = callback.from_user.id
    
    await db.reject_user(user_id, admin_id)
    
    await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω", show_alert=True)
    
    await _update_pending_list(callback.message)

@router.callback_query(F.data == "admin_archive_user")
async def start_archive_user(callback: types.CallbackQuery):
    """Start user archiving process - show employees list"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    all_users = await db.get_users_by_category(include_archived=False)
    if not all_users:
        await callback.message.edit_text(
            "üóÉ **–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞**\n\n"
            "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ.",
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {"–∫—É—Ö–Ω—è": [], "–∑–∞–ª": [], "–º–æ–π–∫–∞": [], "–±–∞—Ä": []}
    for user in all_users:
        category = user.get('category', '–∑–∞–ª')
        if category in categories:
            categories[category].append(user)
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    keyboard = []
    emoji_map = {"–∫—É—Ö–Ω—è": "üç≥", "–∑–∞–ª": "üçΩ", "–º–æ–π–∫–∞": "üßΩ", "–±–∞—Ä": "üçª"}
    for category, users in categories.items():
        if users:
            keyboard.append([InlineKeyboardButton(
                text=f"{emoji_map[category]} {category.upper()} ({len(users)})",
                callback_data=f"archive_category_{category}"
            )])
            for i, user in enumerate(users[:8]):
                name = user['display_name'] or user['full_name'] or 'Unknown'
                callback_data = f"archive_select_user_{user['user_id']}"
                keyboard.append([InlineKeyboardButton(text=f"üë§ {name}", callback_data=callback_data)])
            if len(users) > 8:
                keyboard.append([InlineKeyboardButton(
                    text=f"... –µ—â–µ {len(users) - 8} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                    callback_data=f"archive_show_more_{category}"
                )])
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await callback.message.edit_text(
        "üóÉ **–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ. –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–∞–±–æ—á–∏–º –∑–æ–Ω–∞–º:",
        reply_markup=markup,
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("archive_category_"))
async def archive_show_category(callback: types.CallbackQuery):
    category = callback.data.split("_")[-1]
    all_users = await db.get_users_by_category(category, include_archived=False)
    if not all_users:
        await callback.answer("–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        return
    keyboard = []
    emoji_map = {"–∫—É—Ö–Ω—è": "üç≥", "–∑–∞–ª": "üçΩ", "–º–æ–π–∫–∞": "üßΩ", "–±–∞—Ä": "üçª"}
    keyboard.append([InlineKeyboardButton(
        text=f"{emoji_map[category]} –í–°–ï –°–û–¢–†–£–î–ù–ò–ö–ò: {category.upper()}",
        callback_data=f"archive_category_{category}"
    )])
    for user in all_users:
        name = user['display_name'] or user['full_name'] or 'Unknown'
        callback_data = f"archive_select_user_{user['user_id']}"
        keyboard.append([InlineKeyboardButton(text=f"üë§ {name}", callback_data=callback_data)])
    keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_archive_user")
    ])
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await callback.message.edit_text(
        f"üóÉ **–í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: {emoji_map[category]} {category.title()}**\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=markup,
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("archive_select_user_"))
async def archive_select_user(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[-1])
    all_users = await db.get_users_by_category(include_archived=False)
    user_info = next((u for u in all_users if u['user_id'] == user_id), None)
    if not user_info:
        await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.answer()
        return
    user_name = user_info['display_name'] or user_info['full_name'] or f"ID: {user_id}"
    category = user_info.get('category', '–∑–∞–ª')
    archive_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"admin_confirm_archive_{user_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    await callback.message.edit_text(
        f"üóÉ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è**\n\n"
        f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {user_name}\n"
        f"üÜî ID: {user_id}\n"
        f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
        f"‚ö†Ô∏è **–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:**\n"
        f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É\n"
        f"‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç –≤—Å—é —Ä–∞–±–æ—á—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        f"‚Ä¢ –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –∞—Ä—Ö–∏–≤\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã?",
        reply_markup=archive_keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "admin_search_user")
async def show_search_user_panel(callback: types.CallbackQuery, state: FSMContext):
    """Show search user panel"""
    await state.clear()  # Clear any previous states
    await callback.message.edit_text(
        "üîç **–ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞**\n\n"
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]
        ]),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "admin_manage_categories")
async def manage_categories(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üè∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]
        ]),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "admin_period_reports")
async def show_period_reports_menu(callback: types.CallbackQuery):
    """Show detailed period reports menu"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="report_period_week"),
            InlineKeyboardButton(text="üìÖ –ó–∞ 2 –Ω–µ–¥–µ–ª–∏", callback_data="report_period_2weeks")
        ],
        [
            InlineKeyboardButton(text="üìÖ –ó–∞ –º–µ—Å—è—Ü", callback_data="report_period_month"),
            InlineKeyboardButton(text="üìÖ –ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü", callback_data="report_period_prev_month")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_stats")
        ]
    ])
    
    await callback.message.edit_text(
        "üìÖ **–û—Ç—á–µ—Ç—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n\n"
        "‚Ä¢ **–ó–∞ –Ω–µ–¥–µ–ª—é** - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n"
        "‚Ä¢ **–ó–∞ 2 –Ω–µ–¥–µ–ª–∏** - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π\n"
        "‚Ä¢ **–ó–∞ –º–µ—Å—è—Ü** - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π\n"
        "‚Ä¢ **–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü** - –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –º–µ—Å—è—Ü",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("report_period_"))
async def show_period_report(callback: types.CallbackQuery):
    """Show detailed report for specific period"""
    period_type = callback.data.split("_")[-1]
    
    from datetime import timedelta
    
    today = date.today()
    
    # Calculate date ranges
    if period_type == "week":
        start_date = today - timedelta(days=6)  # Last 7 days including today
        period_text = "–∑–∞ –Ω–µ–¥–µ–ª—é"
        period_desc = f"{start_date.strftime('%d.%m')} - {today.strftime('%d.%m.%Y')}"
    elif period_type == "2weeks":
        start_date = today - timedelta(days=13)  # Last 14 days including today
        period_text = "–∑–∞ 2 –Ω–µ–¥–µ–ª–∏" 
        period_desc = f"{start_date.strftime('%d.%m')} - {today.strftime('%d.%m.%Y')}"
    elif period_type == "month":
        start_date = today - timedelta(days=29)  # Last 30 days including today
        period_text = "–∑–∞ –º–µ—Å—è—Ü"
        period_desc = f"{start_date.strftime('%d.%m')} - {today.strftime('%d.%m.%Y')}"
    elif period_type == "prev":
        # Previous calendar month
        first_day_this_month = today.replace(day=1)
        last_day_prev_month = first_day_this_month - timedelta(days=1)
        start_date = last_day_prev_month.replace(day=1)
        end_date = last_day_prev_month
        period_text = "–ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü"
        month_names = {
            1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å", 5: "–ú–∞–π", 6: "–ò—é–Ω—å",
            7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç", 9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
        }
        period_desc = f"{month_names[start_date.month]} {start_date.year}"
    else:
        start_date = today
        end_date = today
        period_text = "—Å–µ–≥–æ–¥–Ω—è"
        period_desc = today.strftime('%d.%m.%Y')
    
    # Use end_date if defined, otherwise today
    if 'end_date' not in locals():
        end_date = today
    
    # Get stats for period
    all_stats = await db.get_all_users_stats(start_date, end_date)
    
    if not all_stats:
        await callback.message.edit_text(
            f"üìä **–û—Ç—á–µ—Ç {period_text}**\n"
            f"üìÖ **–ü–µ—Ä–∏–æ–¥:** {period_desc}\n\n"
            f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    # Calculate statistics by category
    category_stats = {"–∫—É—Ö–Ω—è": {}, "–∑–∞–ª": {}, "–º–æ–π–∫–∞": {}, "–±–∞—Ä": {}}
    
    for session in all_stats:
        user_id = session['user_id']
        category = session.get('category', '–∑–∞–ª')
        duration = session.get('duration_minutes', 0)
        
        if category not in category_stats:
            continue
            
        if user_id not in category_stats[category]:
            category_stats[category][user_id] = {
                'name': session['full_name'] or session['username'] or 'Unknown',
                'total_minutes': 0,
                'days_worked': 0
            }
        
        if duration > 0:
            category_stats[category][user_id]['total_minutes'] += duration
            category_stats[category][user_id]['days_worked'] += 1
    
    # Format detailed report
    message_text = f"üìä **–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç {period_text}**\n"
    message_text += f"üìÖ **–ü–µ—Ä–∏–æ–¥:** {period_desc}\n\n"
    
    emoji_map = {"–∫—É—Ö–Ω—è": "üç≥", "–∑–∞–ª": "üçΩ", "–º–æ–π–∫–∞": "üßΩ", "–±–∞—Ä": "üçª"}
    
    total_company_minutes = 0
    total_company_users = 0
    
    for category, users in category_stats.items():
        if not users:
            continue
            
        category_total_minutes = sum(user['total_minutes'] for user in users.values())
        category_total_hours = category_total_minutes / 60
        
        message_text += f"\n{emoji_map[category]} **{category.upper()}** ({len(users)} —á–µ–ª.)\n"
        message_text += f"‚îú‚îÄ –û–±—â–µ–µ –≤—Ä–µ–º—è: {format_duration(category_total_minutes)}\n"
        
        # Sort users by total time worked
        sorted_users = sorted(users.items(), key=lambda x: x[1]['total_minutes'], reverse=True)
        
        for user_id, user_data in sorted_users[:3]:  # Show top 3 workers
            message_text += f"‚îú‚îÄ **{user_data['name']}**: {format_duration(user_data['total_minutes'])} ({user_data['days_worked']} –¥–Ω.)\n"
        
        if len(sorted_users) > 3:
            message_text += f"‚îî‚îÄ ... –∏ –µ—â–µ {len(sorted_users) - 3} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
        
        total_company_minutes += category_total_minutes
        total_company_users += len(users)
    
    # Company totals
    avg_minutes_per_user = total_company_minutes / total_company_users if total_company_users > 0 else 0
    
    message_text += f"\nüìà **–ò–¢–û–ì–û –ü–û –ö–û–ú–ü–ê–ù–ò–ò:**\n"
    message_text += f"üë• –†–∞–±–æ—Ç–∞–ª–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {total_company_users}\n"
    message_text += f"‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è: {format_duration(total_company_minutes)}\n"
    message_text += f"üìä –í —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {format_duration(avg_minutes_per_user)}\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_period_reports")]
    ])
    
    await callback.message.edit_text(message_text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "admin_all_users")
async def show_all_users_list(callback: types.CallbackQuery):
    """Show all users with their categories"""
    users = await db.get_users_by_category(include_archived=False)
    
    if not users:
        await callback.message.edit_text(
            "üë• <b>–í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏</b>\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]
            ]),
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {"–∫—É—Ö–Ω—è": [], "–∑–∞–ª": [], "–º–æ–π–∫–∞": [], "–±–∞—Ä": []}
    for user in users:
        if user['status'] == 'approved':  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            category = user.get('category', '–∑–∞–ª')
            if category in categories:
                categories[category].append(user)
    
    message_text = "üë• <b>–í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏</b>\n\n"
    emoji_map = {"–∫—É—Ö–Ω—è": "üç≥", "–∑–∞–ª": "üçΩ", "–º–æ–π–∫–∞": "üßΩ", "–±–∞—Ä": "üçª"}
    
    for category, users_list in categories.items():
        if users_list:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
            message_text += f"{emoji_map[category]} <b>{category.upper()}</b> ({len(users_list)})\n"
            for user in users_list:
                name = user['display_name'] or user['full_name'] or 'Unknown'
                message_text += f"‚Ä¢ {name}\n"
            message_text += "\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]
    ])
    
    await callback.message.edit_text(
        message_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# --- MANUAL CHECK-IN AND CHECK-OUT FLOW ---

async def list_users_for_manual_action(callback: types.CallbackQuery, state: FSMContext, action: str):
    """Generic function to list users for manual check-in/out."""
    approved_users = await db.get_users_by_status('approved')
    if not approved_users:
        await callback.message.edit_text(
            f"–ù–µ—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]])
        )
        await callback.answer()
        return

    keyboard_buttons = []
    for user in approved_users:
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"{user['display_name'] or user['full_name']}",
                callback_data=f"manual_select_user_{action}_{user['user_id']}"
            )
        ])
    
    keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])
    
    action_text = "–ø—Ä–∏—Ö–æ–¥–∞" if action == "checkin" else "—É—Ö–æ–¥–∞"
    await callback.message.edit_text(
        f"üë§ –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–º–µ—Ç–∫–∏ {action_text}:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    )
    await callback.answer()


@router.callback_query(F.data == "manual_checkin_start")
async def manual_checkin_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(ManualCheck.select_user_checkin)
    await list_users_for_manual_action(callback, state, "checkin")

@router.callback_query(F.data == "manual_checkout_start")
async def manual_checkout_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(ManualCheck.select_user_checkout)
    await list_users_for_manual_action(callback, state, "checkout")


@router.callback_query(F.data.startswith("manual_select_user_"))
async def manual_user_selected(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"manual_user_selected callback: {callback.data}")
    parts = callback.data.split("_")
    action = parts[3]
    user_id = int(parts[4])
    logger.info(f"Selected user_id: {user_id}, action: {action}")
    user_info = await db.get_user_info(user_id)
    if not user_info:
        logger.error(f"Failed to get user info for user_id: {user_id}")
        await callback.answer("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    user_name = user_info['display_name'] or user_info['full_name']
    logger.info(f"User name: {user_name}")

    await state.update_data(target_user_id=user_id, target_user_name=user_name)

    if action == "checkin":
        await state.set_state(ManualCheck.enter_time_checkin)
        action_text = "–ø—Ä–∏—Ö–æ–¥–∞"
    else:
        await state.set_state(ManualCheck.enter_time_checkout)
        action_text = "—É—Ö–æ–¥–∞"
        
    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: <b>{user_name}</b>.\n\n"
        f"üïê –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è {action_text} –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ß–ß:–ú–ú</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30).",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]])
    )
    await callback.answer()


@router.message(ManualCheck.enter_time_checkin, F.text)
async def manual_checkin_time_entered(message: types.Message, state: FSMContext):
    """Processes the manually entered check-in time."""
    data = await state.get_data()
    user_id = data.get("target_user_id")

    try:
        time_obj = datetime.strptime(message.text, "%H:%M").time()
        checkin_datetime = datetime.combine(date.today(), time_obj)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ß–ß:–ú–ú</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30).", parse_mode="HTML")
        return

    success, result_message = await db.check_in_with_time(user_id, checkin_datetime)

    if success:
        user_info = await db.get_user_info(user_id)
        await message.answer(f"‚úÖ –ü—Ä–∏—Ö–æ–¥ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ <b>{user_info['display_name']}</b> —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ {checkin_datetime.strftime('%H:%M')}.", parse_mode="HTML")
    else:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏—Ö–æ–¥.\n–ü—Ä–∏—á–∏–Ω–∞: {result_message}", parse_mode="HTML")
    
    await state.clear()


@router.message(ManualCheck.enter_time_checkout, F.text)
async def manual_checkout_time_entered(message: types.Message, state: FSMContext):
    """Processes the manually entered check-out time."""
    data = await state.get_data()
    user_id = data.get("target_user_id")

    try:
        time_obj = datetime.strptime(message.text, "%H:%M").time()
        checkout_datetime = datetime.combine(date.today(), time_obj)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ß–ß:–ú–ú</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:00).", parse_mode="HTML")
        return

    duration, result_message = await db.check_out_with_time(user_id, checkout_datetime)

    if duration is not None:
        user_info = await db.get_user_info(user_id)
        await message.answer(f"‚úÖ –£—Ö–æ–¥ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ <b>{user_info['display_name']}</b> —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ {checkout_datetime.strftime('%H:%M')}.\n\n{result_message}", parse_mode="HTML")
    else:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —É—Ö–æ–¥.\n–ü—Ä–∏—á–∏–Ω–∞: {result_message}", parse_mode="HTML")
        
    await state.clear() 