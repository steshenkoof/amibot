from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, date

from database import db
from config import ADMIN_IDS

router = Router()

class ManualEntry(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_action = State()
    waiting_for_checkin_time = State()
    waiting_for_checkout_time = State()

class UserManagement(StatesGroup):
    waiting_for_category = State()
    waiting_for_confirmation = State()
    waiting_for_search = State()

@router.message(F.text == "üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏", callback_data="admin_users")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á—ë—Ç—ã", callback_data="admin_stats")]
    ])
    await message.answer(
        "üë®‚Äçüíº <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(F.data == "admin_users")
async def show_all_users(callback: types.CallbackQuery):
    all_users = await db.get_all_users()
    if not all_users:
        await callback.message.edit_text(
            "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏</b>\n\n–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            parse_mode="HTML"
        )
        await callback.answer()
        return
    approved_users = [u for u in all_users if u['status'] == 'approved']
    pending_users = [u for u in all_users if u['status'] == 'pending']
    archived_users = [u for u in all_users if u['status'] == 'archived']
    message_text = "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏</b>\n\n"
    if approved_users:
        message_text += f"‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ ({len(approved_users)}):</b>\n" + "\n".join(f"‚Ä¢ {u['display_name'] or u['full_name'] or 'Unknown'}" for u in approved_users[:10]) + "\n\n"
    if pending_users:
        message_text += f"‚è≥ <b>–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ({len(pending_users)}):</b>\n" + "\n".join(f"‚Ä¢ {u['display_name'] or u['full_name'] or 'Unknown'}" for u in pending_users[:5]) + "\n\n"
    if archived_users:
        message_text += f"üóÉ <b>–ê—Ä—Ö–∏–≤ ({len(archived_users)}):</b>\n" + "\n".join(f"‚Ä¢ {u['display_name'] or u['full_name'] or 'Unknown'}" for u in archived_users[:5]) + "\n\n"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≥ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞—è–≤–∫–∏", callback_data="admin_pending")],
        [InlineKeyboardButton(text="üóÉ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data="admin_archive_user")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data="admin_search_user")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    msg = await callback.message.answer(message_text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data == "admin_stats")
async def show_stats_menu(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üç≥ –ö—É—Ö–Ω—è", callback_data="stats_category_–∫—É—Ö–Ω—è"),
         InlineKeyboardButton(text="üçΩ –ó–∞–ª", callback_data="stats_category_–∑–∞–ª")],
        [InlineKeyboardButton(text="üßΩ –ú–æ–π–∫–∞", callback_data="stats_category_–º–æ–π–∫–∞"),
         InlineKeyboardButton(text="üçª –ë–∞—Ä", callback_data="stats_category_–±–∞—Ä")],
        [InlineKeyboardButton(text="üìÖ –ü–µ—Ä–∏–æ–¥—ã", callback_data="admin_period_reports")],
        [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å Excel", callback_data="admin_report_menu")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    msg = await callback.message.answer("üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á—ë—Ç—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data == "admin_back")
async def admin_back_callback(callback: types.CallbackQuery):
    current_text = callback.message.text or ""
    if "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏" in current_text or "–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞" in current_text or "–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" in current_text:
        # –ì–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥')
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏", callback_data="admin_users")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á—ë—Ç—ã", callback_data="admin_stats")]
        ])
        await callback.message.edit_text(
            "üë®‚Äçüíº <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    elif "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á—ë—Ç—ã" in current_text or "–û—Ç—á–µ—Ç—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º" in current_text:
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üç≥ –ö—É—Ö–Ω—è", callback_data="stats_category_–∫—É—Ö–Ω—è"),
             InlineKeyboardButton(text="üçΩ –ó–∞–ª", callback_data="stats_category_–∑–∞–ª")],
            [InlineKeyboardButton(text="üßΩ –ú–æ–π–∫–∞", callback_data="stats_category_–º–æ–π–∫–∞"),
             InlineKeyboardButton(text="üçª –ë–∞—Ä", callback_data="stats_category_–±–∞—Ä")],
            [InlineKeyboardButton(text="üìÖ –ü–µ—Ä–∏–æ–¥—ã", callback_data="admin_period_reports")],
            [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å Excel", callback_data="admin_report_menu")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        await callback.message.edit_text(
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á—ë—Ç—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    elif "–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç" in current_text or "–ò–¢–û–ì–û –ü–û –ö–û–ú–ü–ê–ù–ò–ò" in current_text:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="report_period_week"),
                InlineKeyboardButton(text="üìÖ –ó–∞ 2 –Ω–µ–¥–µ–ª–∏", callback_data="report_period_2weeks")
            ],
            [
                InlineKeyboardButton(text="üìÖ –ó–∞ –º–µ—Å—è—Ü", callback_data="report_period_month"),
                InlineKeyboardButton(text="üìÖ –ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü", callback_data="report_period_prev_month")
            ],
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_stats")
            ]
        ])
        await callback.message.edit_text(
            "üìÖ **–û—Ç—á–µ—Ç—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n\n"
            "‚Ä¢ **–ó–∞ –Ω–µ–¥–µ–ª—é** - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n"
            "‚Ä¢ **–ó–∞ 2 –Ω–µ–¥–µ–ª–∏** - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π\n"
            "‚Ä¢ **–ó–∞ –º–µ—Å—è—Ü** - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π\n"
            "‚Ä¢ **–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü** - –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –º–µ—Å—è—Ü",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏", callback_data="admin_users")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á—ë—Ç—ã", callback_data="admin_stats")]
        ])
        await callback.message.edit_text(
            "üë®‚Äçüíº <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    await callback.answer()

@router.callback_query(F.data == "admin_pending")
async def show_pending_users(callback: types.CallbackQuery):
    """Show pending registrations"""
    pending_users = await db.get_pending_users()
    
    if not pending_users:
        await callback.message.edit_text(
            "üìã **–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é**\n\n"
            "–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç."
        )
        await callback.answer()
        return
    
    message_text = "‚è≥ **–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é**\n\n"
    keyboard_buttons = []
    
    for user in pending_users:
        user_info = f"üë§ <b>{user['display_name']}</b>\n"
        user_info += f"   ‚Ä¢ ID: {user['user_id']}\n"
        user_info += f"   ‚Ä¢ Username: @{user['username'] if user['username'] else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        
        # Handle datetime object properly
        if user['first_seen']:
            if isinstance(user['first_seen'], str):
                date_str = user['first_seen'][:10]
            else:
                date_str = user['first_seen'].strftime('%d.%m.%Y')
        else:
            date_str = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        user_info += f"   ‚Ä¢ –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏: {date_str}\n\n"
        message_text += user_info
        
        # Add approve/reject buttons for each user
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"‚úÖ –û–¥–æ–±—Ä–∏—Ç—å {user['display_name']}", 
                callback_data=f"approve_{user['user_id']}"
            ),
            InlineKeyboardButton(
                text=f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
                callback_data=f"reject_{user['user_id']}"
            )
        ])
    
    keyboard_buttons.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.edit_text(message_text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data.startswith("approve_"))
async def approve_user(callback: types.CallbackQuery):
    """Approve user registration"""
    user_id = int(callback.data.split("_")[1])
    admin_id = callback.from_user.id
    
    await db.approve_user(user_id, admin_id)
    
    # Send welcome message to approved user
    try:
        from bot import bot  # Import bot instance
        await bot.send_message(
            user_id,
            "üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n"
            "‚úÖ **–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –Ω–∞—à –¥—Ä—É–∂–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ç–∏–≤!**\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ üü¢ –û—Ç–º–µ—á–∞—Ç—å –ø—Ä–∏—Ö–æ–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É\n"
            "‚Ä¢ üî¥ –û—Ç–º–µ—á–∞—Ç—å —É—Ö–æ–¥ —Å —Ä–∞–±–æ—Ç—ã\n"
            "‚Ä¢ üìä –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "‚Ä¢ üì• –°–∫–∞—á–∏–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!",
            parse_mode="Markdown"
        )
    except Exception as e:
        print(f"Failed to notify approved user {user_id}: {e}")
    
    await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", show_alert=True)
    
    # Refresh the pending list
    await show_pending_users(callback)

@router.callback_query(F.data.startswith("reject_"))
async def reject_user(callback: types.CallbackQuery):
    """Reject user registration"""
    user_id = int(callback.data.split("_")[1])
    
    await db.block_user(user_id)
    
    await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞", show_alert=True)
    
    # Refresh the pending list
    await show_pending_users(callback)

@router.callback_query(F.data == "admin_archive_user")
async def start_archive_user(callback: types.CallbackQuery):
    """Start user archiving process - show employees list"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    all_users = await db.get_users_by_category(include_archived=False)
    if not all_users:
        await callback.message.edit_text(
            "üóÉ **–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞**\n\n"
            "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ.",
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {"–∫—É—Ö–Ω—è": [], "–∑–∞–ª": [], "–º–æ–π–∫–∞": [], "–±–∞—Ä": []}
    for user in all_users:
        category = user.get('category', '–∑–∞–ª')
        if category in categories:
            categories[category].append(user)
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    keyboard = []
    emoji_map = {"–∫—É—Ö–Ω—è": "üç≥", "–∑–∞–ª": "üçΩ", "–º–æ–π–∫–∞": "üßΩ", "–±–∞—Ä": "üçª"}
    for category, users in categories.items():
        if users:
            keyboard.append([InlineKeyboardButton(
                text=f"{emoji_map[category]} {category.upper()} ({len(users)})",
                callback_data=f"archive_category_{category}"
            )])
            for i, user in enumerate(users[:8]):
                name = user['display_name'] or user['full_name'] or 'Unknown'
                callback_data = f"archive_select_user_{user['user_id']}"
                keyboard.append([InlineKeyboardButton(text=f"üë§ {name}", callback_data=callback_data)])
            if len(users) > 8:
                keyboard.append([InlineKeyboardButton(
                    text=f"... –µ—â–µ {len(users) - 8} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                    callback_data=f"archive_show_more_{category}"
                )])
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await callback.message.edit_text(
        "üóÉ **–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ. –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–∞–±–æ—á–∏–º –∑–æ–Ω–∞–º:",
        reply_markup=markup,
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("archive_category_"))
async def archive_show_category(callback: types.CallbackQuery):
    category = callback.data.split("_")[-1]
    all_users = await db.get_users_by_category(category, include_archived=False)
    if not all_users:
        await callback.answer("–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        return
    keyboard = []
    emoji_map = {"–∫—É—Ö–Ω—è": "üç≥", "–∑–∞–ª": "üçΩ", "–º–æ–π–∫–∞": "üßΩ", "–±–∞—Ä": "üçª"}
    keyboard.append([InlineKeyboardButton(
        text=f"{emoji_map[category]} –í–°–ï –°–û–¢–†–£–î–ù–ò–ö–ò: {category.upper()}",
        callback_data=f"archive_category_{category}"
    )])
    for user in all_users:
        name = user['display_name'] or user['full_name'] or 'Unknown'
        callback_data = f"archive_select_user_{user['user_id']}"
        keyboard.append([InlineKeyboardButton(text=f"üë§ {name}", callback_data=callback_data)])
    keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_archive_user")
    ])
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await callback.message.edit_text(
        f"üóÉ **–í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: {emoji_map[category]} {category.title()}**\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=markup,
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("archive_select_user_"))
async def archive_select_user(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[-1])
    all_users = await db.get_users_by_category(include_archived=False)
    user_info = next((u for u in all_users if u['user_id'] == user_id), None)
    if not user_info:
        await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.answer()
        return
    user_name = user_info['display_name'] or user_info['full_name'] or f"ID: {user_id}"
    category = user_info.get('category', '–∑–∞–ª')
    archive_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"admin_confirm_archive_{user_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    await callback.message.edit_text(
        f"üóÉ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è**\n\n"
        f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {user_name}\n"
        f"üÜî ID: {user_id}\n"
        f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
        f"‚ö†Ô∏è **–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:**\n"
        f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É\n"
        f"‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç –≤—Å—é —Ä–∞–±–æ—á—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        f"‚Ä¢ –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –∞—Ä—Ö–∏–≤\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã?",
        reply_markup=archive_keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "admin_search_user")
async def show_search_user_panel(callback: types.CallbackQuery):
    """Show search user panel"""
    await callback.message.edit_text(
        "üîç **–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –µ–≥–æ –∏–º—è:",
        parse_mode="Markdown"
    )
    await callback.answer()

@router.message(UserManagement.waiting_for_search)
async def search_user(message: types.Message):
    """Search for a user by ID or name"""
    text = message.text.strip()
    
    # Try to parse as ID
    try:
        user_id = int(text)
        user_info = await db.get_user_info(user_id)
        if user_info:
            await message.answer(
                f"üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**\n\n"
                f"‚Ä¢ ID: {user_id}\n"
                f"‚Ä¢ –ò–º—è: {user_info['display_name'] or user_info['full_name'] or 'Unknown'}\n"
                f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {user_info.get('category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {user_info['status']}\n"
                f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_info['last_active'].strftime('%Y-%m-%d') if user_info['last_active'] else '–ù–∏–∫–æ–≥–¥–∞'}\n"
            )
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except ValueError:
        # Try to find user by name
        all_users = await db.get_all_users()
        users = []
        search_text = text.lower()
        
        # Search in display_name, full_name, and username
        for user in all_users:
            display_name = (user.get('display_name') or '').lower()
            full_name = (user.get('full_name') or '').lower()
            username = (user.get('username') or '').lower()
            
            if (search_text in display_name or 
                search_text in full_name or 
                search_text in username):
                users.append(user)
        
        if users:
            message_text = "üë• **–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n\n"
            for user in users:
                message_text += f"‚Ä¢ ID: {user['user_id']}\n"
                message_text += f"‚Ä¢ –ò–º—è: {user.get('display_name') or user.get('full_name') or 'Unknown'}\n"
                message_text += f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {user.get('category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                message_text += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {user['status']}\n"
                
                # Handle datetime properly for last_active
                if user['last_active']:
                    if isinstance(user['last_active'], str):
                        last_active = user['last_active'][:10]
                    else:
                        last_active = user['last_active'].strftime('%Y-%m-%d')
                else:
                    last_active = '–ù–∏–∫–æ–≥–¥–∞'
                    
                message_text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_active}\n\n"
            await message.answer(message_text)
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

@router.callback_query(F.data == "manual_checkin_time", ManualEntry.waiting_for_action)
async def manual_checkin_with_time(callback: types.CallbackQuery):
    """Start manual check-in with custom time"""
    await callback.message.edit_text(
        "üïê **–û—Ç–º–µ—Ç–∫–∞ –ø—Ä–∏—Ö–æ–¥–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `09:30` –∏–ª–∏ `08:15`\n\n"
        "üìÖ –î–∞—Ç–∞ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (—Å–µ–≥–æ–¥–Ω—è)",
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "manual_checkout_time", ManualEntry.waiting_for_action)
async def manual_checkout_with_time(callback: types.CallbackQuery):
    """Start manual check-out with custom time"""
    await callback.message.edit_text(
        "üïê **–û—Ç–º–µ—Ç–∫–∞ —É—Ö–æ–¥–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —É—Ö–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `18:30` –∏–ª–∏ `17:45`\n\n"
        "üìÖ –î–∞—Ç–∞ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (—Å–µ–≥–æ–¥–Ω—è)",
        parse_mode="Markdown"
    )
    await callback.answer()

@router.message(ManualEntry.waiting_for_checkin_time)
async def process_checkin_time(message: types.Message):
    """Process manual check-in with custom time"""
    time_text = message.text.strip()
    
    # Validate time format
    try:
        time_parts = time_text.split(':')
        if len(time_parts) != 2:
            raise ValueError("Invalid format")
        
        hours = int(time_parts[0])
        minutes = int(time_parts[1])
        
        if not (0 <= hours <= 23) or not (0 <= minutes <= 59):
            raise ValueError("Invalid time")
            
    except ValueError:
        await message.answer(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `09:30`, `08:15`, `10:00`",
            parse_mode="Markdown"
        )
        return
    
    data = await callback.message.bot.get_data()
    target_user_id = data['target_user_id']
    target_user_name = data['target_user_name']
    
    # Create datetime with today's date and specified time
    today = date.today()
    checkin_datetime = datetime.combine(today, datetime.strptime(time_text, '%H:%M').time())
    
    # Add custom check-in to database
    from config import OFFICE_LATITUDE, OFFICE_LONGITUDE
    success = await db.check_in_with_time(
        target_user_id,
        f"manual_{target_user_id}",
        target_user_name,
        checkin_datetime,
        OFFICE_LATITUDE, 
        OFFICE_LONGITUDE
    )
    
    if success:
        await message.answer(
            f"‚úÖ **–ü—Ä–∏—Ö–æ–¥ –æ—Ç–º–µ—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!**\n\n"
            f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {target_user_name}\n"
            f"üìÖ –î–∞—Ç–∞: {today.strftime('%d.%m.%Y')}\n"
            f"üïê –í—Ä–µ–º—è: {time_text}\n"
            f"üìù –û—Ç–º–µ—Ç–∫–∞: –†—É—á–Ω–∞—è (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)",
            parse_mode="Markdown"
        )
    else:
        await message.answer(
            f"‚ö†Ô∏è **–û—à–∏–±–∫–∞**\n\n"
            f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª –ø—Ä–∏—Ö–æ–¥ –Ω–∞ {today.strftime('%d.%m.%Y')}"
        )

@router.message(ManualEntry.waiting_for_checkout_time)
async def process_checkout_time(message: types.Message):
    """Process manual check-out with custom time"""
    time_text = message.text.strip()
    
    # Validate time format
    try:
        time_parts = time_text.split(':')
        if len(time_parts) != 2:
            raise ValueError("Invalid format")
        
        hours = int(time_parts[0])
        minutes = int(time_parts[1])
        
        if not (0 <= hours <= 23) or not (0 <= minutes <= 59):
            raise ValueError("Invalid time")
            
    except ValueError:
        await message.answer(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `18:30`, `17:45`, `19:00`",
            parse_mode="Markdown"
        )
        return
    
    data = await callback.message.bot.get_data()
    target_user_id = data['target_user_id']
    target_user_name = data['target_user_name']
    
    # Create datetime with today's date and specified time
    today = date.today()
    checkout_datetime = datetime.combine(today, datetime.strptime(time_text, '%H:%M').time())
    
    # Add custom check-out to database
    duration_minutes = await db.check_out_with_time(target_user_id, checkout_datetime)
    
    if duration_minutes is not None:
        from utils.excel_export import format_duration
        duration_str = format_duration(duration_minutes)
        
        await message.answer(
            f"‚úÖ **–£—Ö–æ–¥ –æ—Ç–º–µ—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!**\n\n"
            f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {target_user_name}\n"
            f"üìÖ –î–∞—Ç–∞: {today.strftime('%d.%m.%Y')}\n"
            f"üïê –í—Ä–µ–º—è —É—Ö–æ–¥–∞: {time_text}\n"
            f"‚è± –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {duration_str}\n"
            f"üìù –û—Ç–º–µ—Ç–∫–∞: –†—É—á–Ω–∞—è (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)",
            parse_mode="Markdown"
        )
    else:
        await message.answer(
            f"‚ö†Ô∏è **–û—à–∏–±–∫–∞**\n\n"
            f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏ –Ω–∞ {today.strftime('%d.%m.%Y')}.\n"
            f"–°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—Ç—å—Ç–µ –ø—Ä–∏—Ö–æ–¥."
        )

@router.callback_query(F.data == "admin_manage_categories")
async def manage_categories(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üè∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]
        ]),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "admin_period_reports")
async def show_period_reports_menu(callback: types.CallbackQuery):
    """Show detailed period reports menu"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="report_period_week"),
            InlineKeyboardButton(text="üìÖ –ó–∞ 2 –Ω–µ–¥–µ–ª–∏", callback_data="report_period_2weeks")
        ],
        [
            InlineKeyboardButton(text="üìÖ –ó–∞ –º–µ—Å—è—Ü", callback_data="report_period_month"),
            InlineKeyboardButton(text="üìÖ –ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü", callback_data="report_period_prev_month")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_stats")
        ]
    ])
    
    await callback.message.edit_text(
        "üìÖ **–û—Ç—á–µ—Ç—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n\n"
        "‚Ä¢ **–ó–∞ –Ω–µ–¥–µ–ª—é** - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n"
        "‚Ä¢ **–ó–∞ 2 –Ω–µ–¥–µ–ª–∏** - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π\n"
        "‚Ä¢ **–ó–∞ –º–µ—Å—è—Ü** - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π\n"
        "‚Ä¢ **–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü** - –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –º–µ—Å—è—Ü",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("report_period_"))
async def show_period_report(callback: types.CallbackQuery):
    """Show detailed report for specific period"""
    period_type = callback.data.split("_")[-1]
    
    from datetime import timedelta
    
    today = date.today()
    
    # Calculate date ranges
    if period_type == "week":
        start_date = today - timedelta(days=6)  # Last 7 days including today
        period_text = "–∑–∞ –Ω–µ–¥–µ–ª—é"
        period_desc = f"{start_date.strftime('%d.%m')} - {today.strftime('%d.%m.%Y')}"
    elif period_type == "2weeks":
        start_date = today - timedelta(days=13)  # Last 14 days including today
        period_text = "–∑–∞ 2 –Ω–µ–¥–µ–ª–∏" 
        period_desc = f"{start_date.strftime('%d.%m')} - {today.strftime('%d.%m.%Y')}"
    elif period_type == "month":
        start_date = today - timedelta(days=29)  # Last 30 days including today
        period_text = "–∑–∞ –º–µ—Å—è—Ü"
        period_desc = f"{start_date.strftime('%d.%m')} - {today.strftime('%d.%m.%Y')}"
    elif period_type == "prev":
        # Previous calendar month
        first_day_this_month = today.replace(day=1)
        last_day_prev_month = first_day_this_month - timedelta(days=1)
        start_date = last_day_prev_month.replace(day=1)
        end_date = last_day_prev_month
        period_text = "–ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü"
        month_names = {
            1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å", 5: "–ú–∞–π", 6: "–ò—é–Ω—å",
            7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç", 9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
        }
        period_desc = f"{month_names[start_date.month]} {start_date.year}"
    else:
        start_date = today
        end_date = today
        period_text = "—Å–µ–≥–æ–¥–Ω—è"
        period_desc = today.strftime('%d.%m.%Y')
    
    # Use end_date if defined, otherwise today
    if 'end_date' not in locals():
        end_date = today
    
    # Get stats for period
    all_stats = await db.get_all_users_stats(start_date, end_date)
    
    if not all_stats:
        await callback.message.edit_text(
            f"üìä **–û—Ç—á–µ—Ç {period_text}**\n"
            f"üìÖ **–ü–µ—Ä–∏–æ–¥:** {period_desc}\n\n"
            f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    # Calculate statistics by category
    category_stats = {"–∫—É—Ö–Ω—è": {}, "–∑–∞–ª": {}, "–º–æ–π–∫–∞": {}, "–±–∞—Ä": {}}
    
    for session in all_stats:
        user_id = session['user_id']
        category = session.get('category', '–∑–∞–ª')
        duration = session.get('duration_minutes', 0)
        
        if category not in category_stats:
            continue
            
        if user_id not in category_stats[category]:
            category_stats[category][user_id] = {
                'name': session['full_name'] or session['username'] or 'Unknown',
                'total_minutes': 0,
                'days_worked': 0
            }
        
        if duration > 0:
            category_stats[category][user_id]['total_minutes'] += duration
            category_stats[category][user_id]['days_worked'] += 1
    
    # Format detailed report
    message_text = f"üìä **–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç {period_text}**\n"
    message_text += f"üìÖ **–ü–µ—Ä–∏–æ–¥:** {period_desc}\n\n"
    
    emoji_map = {"–∫—É—Ö–Ω—è": "üç≥", "–∑–∞–ª": "üçΩ", "–º–æ–π–∫–∞": "üßΩ", "–±–∞—Ä": "üçª"}
    
    total_company_minutes = 0
    total_company_users = 0
    
    for category, users in category_stats.items():
        if not users:
            continue
            
        category_total_minutes = sum(user['total_minutes'] for user in users.values())
        category_total_hours = category_total_minutes / 60
        
        message_text += f"\n{emoji_map[category]} **{category.upper()}** ({len(users)} —á–µ–ª.)\n"
        message_text += f"‚îú‚îÄ –û–±—â–µ–µ –≤—Ä–µ–º—è: {category_total_hours:.1f} —á.\n"
        
        # Sort users by total time worked
        sorted_users = sorted(users.items(), key=lambda x: x[1]['total_minutes'], reverse=True)
        
        for user_id, user_data in sorted_users[:3]:  # Show top 3 workers
            hours = user_data['total_minutes'] / 60
            message_text += f"‚îú‚îÄ **{user_data['name']}**: {hours:.1f} —á. ({user_data['days_worked']} –¥–Ω.)\n"
        
        if len(sorted_users) > 3:
            message_text += f"‚îî‚îÄ ... –∏ –µ—â–µ {len(sorted_users) - 3} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
        
        total_company_minutes += category_total_minutes
        total_company_users += len(users)
    
    # Company totals
    total_company_hours = total_company_minutes / 60
    avg_hours_per_user = total_company_hours / total_company_users if total_company_users > 0 else 0
    
    message_text += f"\nüìà **–ò–¢–û–ì–û –ü–û –ö–û–ú–ü–ê–ù–ò–ò:**\n"
    message_text += f"üë• –†–∞–±–æ—Ç–∞–ª–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {total_company_users}\n"
    message_text += f"‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_company_hours:.1f} —á.\n"
    message_text += f"üìä –í —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {avg_hours_per_user:.1f} —á.\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_period_reports")]
    ])
    
    await callback.message.edit_text(message_text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer() 