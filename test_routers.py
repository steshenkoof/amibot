#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤
"""
import asyncio
import logging
import sys
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == "win32":
    os.environ["PYTHONIOENCODING"] = "utf-8"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('test_routers.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

def test_routers():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤"""
    try:
        logger.info("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–û–£–¢–ï–†–û–í ===")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        from config import BOT_TOKEN, ADMIN_IDS
        logger.info(f"–¢–æ–∫–µ–Ω –±–æ—Ç–∞: {len(BOT_TOKEN)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"–ê–¥–º–∏–Ω—ã: {ADMIN_IDS}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã —Ä–æ—É—Ç–µ—Ä–æ–≤
        logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã —Ä–æ—É—Ç–µ—Ä–æ–≤...")
        
        from handlers.start import router as start_router
        from handlers.work import router as work_router
        from handlers.reports import router as reports_router
        from handlers.admin import router as admin_router
        from handlers.registration import router as registration_router
        
        logger.info("‚úÖ –í—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É...")
        from handlers.start import get_main_keyboard
        keyboard = get_main_keyboard(5168428653)  # –í–∞—à ID –∫–∞–∫ –∞–¥–º–∏–Ω–∞
        
        logger.info(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: {len(keyboard.keyboard)} —Å—Ç—Ä–æ–∫")
        for i, row in enumerate(keyboard.keyboard):
            logger.info(f"  –°—Ç—Ä–æ–∫–∞ {i}: {[btn.text for btn in row]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ—É—Ç–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ—É—Ç–µ—Ä—ã...")
        routers = {
            "start": start_router,
            "work": work_router,
            "reports": reports_router,
            "admin": admin_router,
            "registration": registration_router
        }
        
        for name, router in routers.items():
            logger.info(f"  ‚úÖ {name} router: {type(router).__name__}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∏–º–ø–æ—Ä—Ç–∞—Ö
        logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º grep –ø–æ–∏—Å–∫–æ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        import subprocess
        import os
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        try:
            result = subprocess.run(
                ['grep', '-r', 'üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'handlers/'],
                capture_output=True, text=True, cwd=os.getcwd()
            )
            if result.returncode == 0:
                logger.info("  ‚úÖ –ù–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å'")
            else:
                logger.warning("  ‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å'")
        except FileNotFoundError:
            # grep –Ω–µ –Ω–∞–π–¥–µ–Ω (Windows), –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
            logger.info("  üìù –ü–æ–∏—Å–∫ grep –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –Ω–∞–ø—Ä—è–º—É—é...")
            
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª admin.py
            with open('handlers/admin.py', 'r', encoding='utf-8') as f:
                admin_content = f.read()
                if 'üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å' in admin_content:
                    logger.info("  ‚úÖ –ù–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å' –≤ admin.py")
                else:
                    logger.warning("  ‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å' –≤ admin.py")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Ä–æ—É—Ç–µ—Ä–æ–≤ –≤ bot.py
        logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Ä–æ—É—Ç–µ—Ä–æ–≤ –≤ bot.py...")
        with open('bot.py', 'r', encoding='utf-8') as f:
            bot_content = f.read()
            
        if 'dp.include_router(admin.router)' in bot_content:
            admin_pos = bot_content.find('dp.include_router(admin.router)')
            start_pos = bot_content.find('dp.include_router(start.router)')
            
            if admin_pos < start_pos:
                logger.info("  ‚úÖ –ü–æ—Ä—è–¥–æ–∫ —Ä–æ—É—Ç–µ—Ä–æ–≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π: admin –ø–µ—Ä–µ–¥ start")
            else:
                logger.warning("  ‚ö†Ô∏è  –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Ä–æ—É—Ç–µ—Ä–æ–≤: start –ø–µ—Ä–µ–¥ admin")
        
        logger.info("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===")
        return True
        
    except Exception as e:
        logger.error(f"–û–®–ò–ë–ö–ê: {e}", exc_info=True)
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤...")
    
    # –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    if not test_routers():
        logger.error("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ!")
        return
    
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ! –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
    
    # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        from bot import main as bot_main
        await bot_main()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}", exc_info=True)

if __name__ == "__main__":
    asyncio.run(main()) 